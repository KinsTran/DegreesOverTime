response <- GET(paste0(base.url, "committees"), query = members) %>%
content("text") %>%
fromJSON()
return(flatten(response$results))
}
committees <- get.committees(legislators.bioguide_id)
committees <- get.committees(legislators$bioguide_id)
committees <- lapply(get.committees, legislators$bioguide_id)
committees <- lapply(legislators$bioguide_id, get.committees)
View(committees)
get.committees(S000510)
get.committees("S000510")
test <- get.committees("S000510")
View(test)
is.dataframe(test)
is.data.frame(test)
View(committes)
test2 <- flatten(committees)
legislators$bioguide_id
bio.id <- select(legislators, bioguide_id)
committees <- lapply(bio.id, get.committees)
View(bio.id)
is.data.frame(bio.id)
bio.id <- list(legislators$bioguide_id)
committees <- lapply(bio.id, get.committees)
View(bio.id)
bio.id
bio.id <- list(select(legislators, bioguide_id))
bio.id
View(bio.id)
is.data.frame(bio.id)
is.list(bio.id)
is.list(bio.id$bioguide_id)
committees <- lapply(bio.id$bioguide_id, get.committees)
committees <- lapply(bio.id$bioguide_id, get.committees)
committees
View(committees)
as.list
?as.list
bio.id <- as.list(legislators$bioguide_id)
bio.id
View(bio.id)
bio.id <- as.list(legislators$bioguide_id) # No website in particular, but inspired by all the as.data.frame functions I saw when I googled
committees <- lapply(bio.id, get.committees)
View(committees)
bio.id <- list(legislators$bioguide_id) # No website in particular, but inspired by all the as.data.frame functions I saw when I googled
committees <- lapply(bio.id, get.committees)
committees <- lapply(bio.id, get.committees)
bio.id <- as.list(legislators$bioguide_id) # No website in particular, but inspired by all the as.data.frame functions I saw when I googled
View(bio.id)
committees <- lapply(bio.id, get.committees)
committees
View(committees)
View(comittees[1])
View(committees[1])
View(committees[2])
View(committees[3])
committees.bound <- full_join(committees)
committees.bound <- full_join(committees[0:committees.length])
committees.bound <- full_join(committees[1:length(committees)])
committees[0]
committees.bound <- full_join(committees[1], committees[2])
committees[1]
is.list(committees[1])
is.data.frame(committees[1])
committees.bound <- full_join(as.data.frame(committes[1:length(committes)]))
committees.bound <- full_join(as.data.frame(committes[1:length(committees)]))
committees.bound <- full_join(as.data.frame(committes[1:length(committees)]))
committees.bound <- full_join(as.data.frame(committees[1:length(committees)]))
# Library everything
library(knitr)
library(dplyr)
library(jsonlite)
library(httr)
# Store basic variables
zipcode <- list(zip = 98056) # Stored as list because it's what is needed for query
base.url <- "https://congress.api.sunlightfoundation.com/"
# GET response and then make it usable
response <- GET(paste0(base.url, "districts/locate"), query = zipcode) %>%
content("text") %>%
fromJSON()
congressional.district <- flatten(response$results) # Use on $results since that's where the actual data is
# GET legislators response, make it usable
response <- GET(paste0(base.url, "legislators/locate"), query = zipcode) %>%
content("text") %>%
fromJSON()
legislators <- flatten(response$results)
# Grabbing values from legislators to use and setting up settings for kable
table.legislators <- select(legislators, first_name, last_name, title, party, chamber, phone, website, twitter_id)
# Formatting the website and twitter into links that rmarkdown will recognize
table.legislators$website <- lapply(table.legislators$website, function(site) {
paste0("[link](", site, ")")
})
table.legislators$twitter_id <- lapply(table.legislators$twitter_id, function(twitter) {
paste0("[link](https://twitter.com/", twitter, ")")
})
col.names <- c("First Name", "Last Name", "Title", "Party", "Chamber", "Phone", "Website", "Twitter")
# Build a table using kable
kable(table.legislators, col.names = col.names, align = "l")
# GET committees and create a bar chart
get.committees <- function(legislator.id) {
members <- list(member_ids = legislator.id)
response <- GET(paste0(base.url, "committees"), query = members) %>%
content("text") %>%
fromJSON()
return(flatten(response$results))
}
bio.id <- as.list(legislators$bioguide_id) # No website in particular, but inspired by all the as.data.frame functions I saw when I googled
committees <- lapply(bio.id, get.committees)
committees.bound <- full_join(as.data.frame(committees[1:length(committees)]))
View(bio.id)
bio.id <- legislators$bioguide_id # No website in particular, but inspired by all the as.data.frame functions I saw when I googled
View(bio.id)
bio.id <- as.list(legislators$bioguide_id) # No website in particular, but inspired by all the as.data.frame functions I saw when I googled
View(bio.id)
committees <- lapply(bio.id, get.committees)
View(committees)
committees
kable(committees)
get.committees <- function(legislator.id) {
members <- list(member_ids = legislator.id)
response <- GET(paste0(base.url, "committees"), query = members) %>%
content("text") %>%
fromJSON()
return(response)
}
bio.id <- as.list(legislators$bioguide_id) # No website in particular, but inspired by all the as.data.frame functions I saw when I googled
committees <- lapply(bio.id, get.committees)
committees.bound <- full_join(as.data.frame(committees[1:length(committees)]))
View(bio.id)
View(committees)
get.committees <- function(legislator.id) {
members <- list(member_ids = legislator.id)
response <- GET(paste0(base.url, "committees"), query = members) %>%
content("text") %>%
fromJSON()
return(flatten(response$results))
}
bio.id <- as.list(legislators$bioguide_id) # No website in particular, but inspired by all the as.data.frame functions I saw when I googled
committees <- lapply(bio.id, get.committees)
committees
committees.count <- lapply(summarise(committees, count = n()))
committees.count <- summarise(committees, count = n())
committees.count <- lapply(committees, length)
?length()
?count()
committees.count <- lapply(committees, count
)
committees.count <- lapply(committees, count)
View(committees.count)
committees.count <- as.data.frame(lapply(committees, count)) # Gets count of how many committes the legislators serve on
View(congressional.district)
View(committees.count)
bio.id <- legislators$bioguide_id # No website in particular, but inspired by all the as.data.frame functions I saw when I googled
bio.id <- legislators$bioguide_id # No website in particular, but inspired by all the as.data.frame functions I saw when I googled
View(bio.id)
committees <- lapply(bio.id, get.committees) # Gets committee information, stored for later usage
View(committees.count)
View(congressional.district)
View(congressional.district)
View(committees.count)
return(response)
get.committees <- function(legislator.id) {
members <- list(member_ids = legislator.id)
response <- GET(paste0(base.url, "committees"), query = members) %>%
content("text") %>%
fromJSON()
return(response)
}
bio.id <- legislators$bioguide_id # No website in particular, but inspired by all the as.data.frame functions I saw when I googled
committees <- lapply(bio.id, get.committees) # Gets committee information, stored for later usage
View(committees)
get.committees <- function(legislator.id) {
members <- list(member_ids = legislator.id)
response <- GET(paste0(base.url, "committees"), query = members) %>%
content("text") %>%
fromJSON()
return(flatten(response$results))
}
bio.id <- legislators$bioguide_id # No website in particular, but inspired by all the as.data.frame functions I saw when I googled
committees <- lapply(bio.id, get.committees) # Gets committee information, stored for later usage
committees.count <- lapply(committees, count) # Gets count of how many committees the legislators serve on
View(committees.count)
committees.count <- as.data.frame(lapply(committees, count)) # Gets count of how many committees the legislators serve on
View(committees.count)
View(committees)
?summarise()
bind_rows
?bind_rows
get.committees <- function(legislator.id) {
members <- list(member_ids = legislator.id)
response <- GET(paste0(base.url, "committees"), query = members) %>%
content("text") %>%
fromJSON() %>%
response <- as.data.frame(flatten(response$results)) %>%  # If there's a way to use %>% on the $results part, can the grader enlighten me?
mutate(bioguide_id = legislator.id)
return(response)
}
bio.id <- legislators$bioguide_id # No website in particular, but inspired by all the as.data.frame functions I saw when I googled
committees <- lapply(bio.id, get.committees) # Gets committee information, stored for later usage
get.committees <- function(legislator.id) {
members <- list(member_ids = legislator.id)
response <- GET(paste0(base.url, "committees"), query = members) %>%
content("text") %>%
fromJSON()
response <- as.data.frame(flatten(response$results)) %>%  # If there's a way to use %>% on the $results part, can the grader enlighten me?
mutate(bioguide_id = legislator.id)
return(response)
}
bio.id <- legislators$bioguide_id # No website in particular, but inspired by all the as.data.frame functions I saw when I googled
committees <- lapply(bio.id, get.committees) # Gets committee information, stored for later usage
View(congressional.district)
View(legislators)
committees <- lapply(bio.id, get.committees) %>%  # Gets committee information, stored for later usage
bind_rows(committees)
View(committees)
committees <- lapply(bio.id, get.committees) %>%  # Gets committee information, stored for later usage
bind_rows()
?bind
committees <- lapply(bio.id, get.committees) %>%  # Gets committee information, stored for later usage
bind_rows() %>%
left_join(legislators)
left_join
?left_join
bio.id <- legislators$bioguide_id # No website in particular, but inspired by all the as.data.frame functions I saw when I googled
committees <- lapply(bio.id, get.committees) %>%  # Gets committee information, stored for later usage
bind_rows() %>%
left_join(legislators, by = bioguide_id)
committees <- lapply(bio.id, get.committees) %>%  # Gets committee information, stored for later usage
bind_rows() %>%
left_join(legislators, by = "bioguide_id")
committee.count <- group_by(committees, bioguide_id)
committee.count <- group_by(committees, bioguide_id) %>%
summarise(count = n()) %>%
select(first_name, last_name, count)
committee.count <- group_by(committees, bioguide_id) %>%
summarise(count = n()) %>%
select("first_name", "last_name", "count")
committee.count <- group_by(committees, bioguide_id) %>%
summarise(count = n())
View(committee.count)
committee.count <- group_by(committees, bioguide_id, first_name, last_name) %>%
summarise(count = n())
View(committee.count)
committee.count <- group_by(committees, bioguide_id, first_name, last_name) %>%
summarise(count = n()) %>%
arrange(count)
arrange
?arrange
committee.count <- group_by(committees, bioguide_id, first_name, last_name) %>%
summarise(count = n()) %>%
arrange(count, desc)
committee.count <- group_by(committees, bioguide_id, first_name, last_name) %>%
summarise(count = n()) %>%
arrange(desc(count))
?barplot
source('D:/Info201/a5-report-KinsTran/test.R', echo=TRUE)
committee.count <- group_by(committees, bioguide_id, first_name, last_name) %>% # Get the count of how many committees each rep is on
summarise(count = n()) %>%
mutate(full_name = paste0(first+name + " " + last_name) %>% #For convienence later
arrange(desc(count))
barplot(committee.count, main = "Committees Served on by Each Rep.", horiz = TRUE, names.arg = committee.count) # http://www.statmethods.net/graphs/bar.html
committee.count <- group_by(committees, bioguide_id, first_name, last_name) %>% # Get the count of how many committees each rep is on
summarise(count = n()) %>%
mutate(full_name = paste0(first+name + " " + last_name)) %>% #For convienence later
arrange(desc(count))
committee.count <- group_by(committees, bioguide_id, first_name, last_name) %>% # Get the count of how many committees each rep is on
summarise(count = n()) %>%
mutate(full_name = paste0(first_name + " " + last_name)) %>% #For convienence later
arrange(desc(count))
committee.count <- group_by(committees, bioguide_id, first_name, last_name) %>% # Get the count of how many committees each rep is on
summarise(count = n()) %>%
mutate(full_name = paste(first_name, last_name)) %>% #For convienence later
arrange(desc(count))
barplot(committee.count, main = "Committees Served on by Each Rep.", horiz = TRUE, names.arg = committee.count$full_name) # http://www.statmethods.net/graphs/bar.html
barplot(committee.count$count, main = "Committees Served on by Each Rep.", horiz = TRUE, names.arg = committee.count$full_name) # http://www.statmethods.net/graphs/bar.html
committee.count <- group_by(committees, bioguide_id, first_name, last_name) %>% # Get the count of how many committees each rep is on
summarise(count = n()) %>%
mutate(full_name = paste(first_name, last_name)) %>% #For convienence later
arrange(count)
barplot(committee.count$count, main = "Committees Served on by Each Rep.", horiz = TRUE, names.arg = committee.count$full_name) # http://www.statmethods.net/graphs/bar.html
?barplot
barplot(committee.count$count, main = "Committees Served on by Each Rep.", horiz = TRUE, names.arg = committee.count$full_name, xlab = "# Committees") # http://www.statmethods.net/graphs/bar.html
?par()
settings <- par(las = 1)
barplot(committee.count$count, main = "Committees Served on by Each Rep.", horiz = TRUE, names.arg = committee.count$full_name, xlab = "# Committees", tag = settings) # http://www.statmethods.net/graphs/bar.html
barplot(committee.count$count, main = "Committees Served on by Each Rep.", horiz = TRUE, names.arg = committee.count$full_name, xlab = "# Committees") # http://www.statmethods.net/graphs/bar.html
settings <- par(las = 1)
barplot(committee.count$count, main = "Committees Served on by Each Rep.", horiz = TRUE, names.arg = committee.count$full_name, xlab = "# Committees") # http://www.statmethods.net/graphs/bar.html
settings <- par(las = 1)
barplot(committee.count$count, main = "Committees Served on by Each Rep.", horiz = TRUE, names.arg = committee.count$full_name, xlab = "# Committees") # http://www.statmethods.net/graphs/bar.html
?barplot
# Library everything
library(knitr)
library(dplyr)
library(jsonlite)
library(httr)
# Store basic variables
zipcode <- list(zip = 98056) # Stored as list because it's what is needed for query
base.url <- "https://congress.api.sunlightfoundation.com/"
# GET response and then make it usable
response <- GET(paste0(base.url, "districts/locate"), query = zipcode) %>%
content("text") %>%
fromJSON()
congressional.district <- flatten(response$results) # Use on $results since that's where the actual data is
# GET legislators response, make it usable
response <- GET(paste0(base.url, "legislators/locate"), query = zipcode) %>%
content("text") %>%
fromJSON()
legislators <- flatten(response$results)
# Grabbing values from legislators to use and setting up settings for kable
table.legislators <- select(legislators, first_name, last_name, title, party, chamber, phone, website, twitter_id)
# Formatting the website and twitter into links that rmarkdown will recognize
table.legislators$website <- lapply(table.legislators$website, function(site) {
paste0("[link](", site, ")")
})
table.legislators$twitter_id <- lapply(table.legislators$twitter_id, function(twitter) {
paste0("[link](https://twitter.com/", twitter, ")")
})
col.names <- c("First Name", "Last Name", "Title", "Party", "Chamber", "Phone", "Website", "Twitter")
# Build a table using kable
kable(table.legislators, col.names = col.names, align = "l")
# GET committees and create a bar chart
get.committees <- function(legislator.id) {
members <- list(member_ids = legislator.id)
response <- GET(paste0(base.url, "committees"), query = members) %>%
content("text") %>%
fromJSON()
response <- as.data.frame(flatten(response$results)) %>%  # If there's a way to use %>% on the $results part, can the grader enlighten me?
mutate(bioguide_id = legislator.id)
return(response)
}
bio.id <- legislators$bioguide_id # No website in particular, but inspired by all the as.data.frame functions I saw when I googled
committees <- lapply(bio.id, get.committees) %>%  # Gets committee information, stored for later usage
bind_rows() %>%
left_join(legislators, by = "bioguide_id")
committee.count <- group_by(committees, bioguide_id, first_name, last_name) %>% # Get the count of how many committees each rep is on
summarise(count = n()) %>%
mutate(full_name = paste(first_name, last_name)) %>% #For convienence later
arrange(count) # FOr some reason barplot builds it backwards, so sort this in ascending order to have the barplot be descending
settings <- par(las = 1)
barplot(committee.count$count, main = "Committees Served on by Each Rep.", horiz = TRUE, names.arg = committee.count$full_name, xlab = "# Committees") # http://www.statmethods.net/graphs/bar.html
settings <- par(las = 1, mar = c(2, 4, 4, 2) + 0.1) # https://stat.ethz.ch/pipermail/r-help/2008-November/178878.html
barplot(committee.count$count, main = "Committees Served on by Each Rep.", horiz = TRUE, names.arg = committee.count$full_name, xlab = "# Committees") # http://www.statmethods.net/graphs/bar.html
settings <- par(las = 1, mar = c(0, 4, 4, 2) + 0.1) # https://stat.ethz.ch/pipermail/r-help/2008-November/178878.html
barplot(committee.count$count, main = "Committees Served on by Each Rep.", horiz = TRUE, names.arg = committee.count$full_name, xlab = "# Committees") # http://www.statmethods.net/graphs/bar.html
settings <- par(las = 1, mar = c(5, 0, 4, 2) + 0.1) # https://stat.ethz.ch/pipermail/r-help/2008-November/178878.html
barplot(committee.count$count, main = "Committees Served on by Each Rep.", horiz = TRUE, names.arg = committee.count$full_name, xlab = "# Committees") # http://www.statmethods.net/graphs/bar.html
settings <- par(las = 1, mar = c(5, 4, 4, 0) + 0.1) # https://stat.ethz.ch/pipermail/r-help/2008-November/178878.html
barplot(committee.count$count, main = "Committees Served on by Each Rep.", horiz = TRUE, names.arg = committee.count$full_name, xlab = "# Committees") # http://www.statmethods.net/graphs/bar.html
settings <- par(las = 1, mar = c(5, 10, 4, 2) + 0.1) # https://stat.ethz.ch/pipermail/r-help/2008-November/178878.html
barplot(committee.count$count, main = "Committees Served on by Each Rep.", horiz = TRUE, names.arg = committee.count$full_name, xlab = "# Committees") # http://www.statmethods.net/graphs/bar.html
?bind
?first
chosen.committee <- filter(committees, subcommittee == FALSE) %>% # https://stat.ethz.ch/R-manual/R-devel/library/utils/html/head.html
head() # Arbitrarily grabbing first committee that is not a subcommittee like it said to in Slack
View(chosen.committee)
chosen.committee <- filter(committees, subcommittee == FALSE)
chosen.committee <- filter(committees, subcommittee == FALSE) %>% # https://stat.ethz.ch/R-manual/R-devel/library/utils/html/head.html
head(n = 1) # Arbitrarily grabbing first committee that is not a subcommittee like it said to in Slack
View(chosen.committee)
View(chosen.committee)
response <- GET(paste0(base.url, "committees"), query = query.params) %>%
content("text") %>%
fromJSON()
chosen.committee <- filter(committees, subcommittee == FALSE) %>% # https://stat.ethz.ch/R-manual/R-devel/library/utils/html/head.html
head(n = 1) # Arbitrarily grabbing first committee that is not a subcommittee like it said to in Slack
query.params <- list(committee_id = chosen.committee$committee_id, fields = "members")
response <- GET(paste0(base.url, "committees"), query = query.params) %>%
content("text") %>%
fromJSON()
committee.information <- fromJSON(content(response,"text"))$results$members[[1]] %>% flatten()
response <- GET(paste0(base.url, "committees"), query = query.params)
committee.information <- fromJSON(content(response,"text"))$results$members[[1]] %>% flatten()
View(committee.count)
View(committee.information)
View(chosen.committee)
chair <- filter(committee.information, title == "Chair") %>%
mutate(legislator.full_name = paste(legislator.first_name, legislator.last_name)) %>%
select(title, legislator.full_name)
View(chair)
nrow
people.on.committee <- nrow(committee.information)
maj.or.min <- filter(committee.information, legislator.bioguide_id == chosen.committee$bioguide_id)
View(maj.or.min)
%>% select(side)
maj.or.min <- filter(committee.information, legislator.bioguide_id == chosen.committee$bioguide_id)
maj.or.min <- filter(committee.information, legislator.bioguide_id == chosen.committee$bioguide_id) %>%
select(side)
View(maj.or.min)
gender.distribution <- group_by(committee.information, legislator.gender) %>%
summarize(count = n())
View(gender.distribution)
?sum
gender.distribution <- group_by(committee.information, legislator.gender) %>%
summarize(count = n()) %>%
mutate(percentage = count/sum(count))
?round
gender.distribution <- group_by(committee.information, legislator.gender) %>%
summarize(count = n()) %>%
mutate(percentage = round(count/sum(count)))
gender.distribution <- group_by(committee.information, legislator.gender) %>%
summarize(count = n()) %>%
mutate(percentage = trunc(count/sum(count)))
gender.distribution <- group_by(committee.information, legislator.gender) %>%
summarize(count = n()) %>%
mutate(percentage = round(count/sum(count), 2))
gender.distribution <- group_by(committee.information, legislator.gender) %>%
summarize(count = n()) %>%
mutate(percentage = round(count/sum(count), 2) * 100)
View(chair)
View(committee.count)
View(chosen.committee)
View(committee.count)
library(plotly)
plot_ly()
plot_ly(data = midwest, x = ~percollege, color = ~state, type = "box")
numbers1 <- c(1:10)
numbers2 <- c(1:10)
numbers.data <- data.frame(numbers1, numbers2)
scatter.plot <- plot_ly(data = numbers.data, type = "scatter")
View(scatter.plot)
scatter.plot
scatter.plot
scatter.plot <- plot_ly(data = numbers.data)
scatter.plot
numbers.data <- data.frame(numbers1, numbers2)
View(numbers.data)
scatter.plot <- plot_ly(data = numbers.data, x = ~numbers1, y = ~numbers2, type = "scatter")
scatter.plot
bar_chart <- function(dataset, x.variable, y.variable, name) {
p <- plot_ly(dataset,
x = ~x.variable,
y = ~y.variable,
name = name,
type = "bar"
) %>%
layout(yaxis = list(title = y.label))
return (p)
}
bar_chart <- function(dataset, x.variable, y.variable, title, y.label) {
p <- plot_ly(dataset,
x = ~x.variable,
y = ~y.variable,
type = "bar"
) %>%
layout(title = "name",
yaxis = list(title = y.label))
return (p)
}
bar_chart <- function(dataset, x.variable, y.variable, title, x.label, y.label) {
p <- plot_ly(dataset,
x = ~x.variable,
y = ~y.variable,
type = "bar"
) %>%
layout(title = title,
xaxis = list(title = x.label),
yaxis = list(title = y.label))
return (p)
}
shiny::runApp('a8-building-apps-KinsTran')
runApp('a8-building-apps-KinsTran')
library(rsconnect)
library(dplyr)
library(shiny)
library(ggplot2)
runApp('a8-building-apps-KinsTran')
runApp('a8-building-apps-KinsTran')
shiny::runApp('a8-building-apps-KinsTran')
runApp('a8-building-apps-KinsTran')
runApp('a8-building-apps-KinsTran')
shiny::runApp('DegreesOverTime')
install.packages('shinythemes')
runApp('DegreesOverTime')
runApp('DegreesOverTime')
runApp('DegreesOverTime')
runApp('DegreesOverTime')
runApp('DegreesOverTime')
runApp('DegreesOverTime')
males.data <- read.csv("data/Bach_Degrees_Males.csv", header = TRUE, stringsAsFactors = FALSE)
females.data <- read.csv("data/Bach_Degrees_Females.csv", header = TRUE, stringsAsFactors = FALSE)
males.data <- read.csv("./data/Bach_Degrees_Males.csv", header = TRUE, stringsAsFactors = FALSE)
females.data <- read.csv("./data/Bach_Degrees_Females.csv", header = TRUE, stringsAsFactors = FALSE)
males.data <- read.csv("./data/Bach_Degrees_Males.csv", header = TRUE, stringsAsFactors = FALSE)
females.data <- read.csv("./data/Bach_Degrees_Females.csv", header = TRUE, stringsAsFactors = FALSE)
all.years <- read.csv("data/Bach_Degrees_By_Race.csv", header = TRUE, stringsAsFactors = FALSE)
first.years <- read.csv("data/Bach_Degrees_By_Race_13_14.csv", header = TRUE, stringsAsFactors = FALSE)
second.years <- read.csv("data/Bach_Degrees_By_Race_14_15.csv", header = TRUE, stringsAsFactors = FALSE)
colnames(all.years) <- gsub("\\.", " ", colnames(all.years))
setwd("D:/Info201/DegreesOverTime")
males.data <- read.csv("./data/Bach_Degrees_Males.csv", header = TRUE, stringsAsFactors = FALSE)
females.data <- read.csv("./data/Bach_Degrees_Females.csv", header = TRUE, stringsAsFactors = FALSE)
runApp()
View(males.data)
View(females.data)
View(all.years)
all.years <- read.csv("data/Bach_Degrees_By_Race.csv", header = TRUE, stringsAsFactors = FALSE)
View(all.years)
View(first.years)
males.data <- read.csv("./data/Bach_Degrees_Males.csv", header = TRUE, stringsAsFactors = FALSE)
females.data <- read.csv("./data/Bach_Degrees_Females.csv", header = TRUE, stringsAsFactors = FALSE)
colnames(males.data) <- gsub("\\.", " ", colnames(males.data))
colnames(males.data) <- gsub("X", "", colnames(males.data))
colnames(females.data) <- gsub("\\.", " ", colnames(females.data))
colnames(females.data) <- gsub("X", "", colnames(females.data))
View(all.years)
?is.element
plot.data <- c()
runApp()
runApp()
runApp()
