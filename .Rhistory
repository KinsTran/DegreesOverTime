<<<<<<< HEAD
<<<<<<< HEAD
shiny::runApp('C:/Users/Calvin/Desktop/info201/assignments/DegreesOverTime')
# ui.R
library(shiny)
=======
# Be sure to **not** treat strings as factors!
Titanic <- data.frame(Titanic)
# Create a variable `children` that are the rows of the data frame with information about children on the Titanic.
children <- subset(Titanic, Age == "Child")
# Create a variable `num.children` that is the total number of children on the Titanic.
# Hint: remember the `sum()` function!
num.children <- sum(children$Freq)
# Create a variable `most.lost` which has row with the largest absolute number of losses (people who did not survive).
# Tip: you can use multiple statements (lines of code), such as to make "intermediate" sub-frames (similar to what you did with the `children` variables)
did.not.survive <- subset(Titanic, Survived == "No")
max.lost <- max(Titanic$Freq)
most.lost <- did.not.survive[which.max(did.not.survive$Freq), ]
# Define a function called `SurvivalRate` that takes in a ticket class (e.g., "1st", "2nd") as an argument.
# This function should return a sentence describing the total survival rate of men vs. "women and children" in that ticketing class.
# For example: `"Of Crew class, 87% of women and children survived and 22% of men survived."`
# The approach you take to generating the sentence to return is up to you. A good solution will likely utilize
# intermediate variables (subsets of data frames) and filtering to produce the required data.
# Avoid using a "loop" in R!
SurvivalRate <- function(ticket) {
child.adult.female <- subset(Titanic, (Age != 'Adult' | Sex !='Male') & Class == ticket)
adult.male <- subset(Titanic, Age == 'Adult' & Sex == 'Male' & Class == ticket)
total.child.adult.female <- sum(child.adult.female$Freq)
total.adult.male <- sum(adult.male$Freq)
child.adult.female.survived <- subset(child.adult.female, Survived == 'Yes')
adult.male.survived <- subset(adult.male, Survived == 'Yes')
total.child.adult.female.survived <- sum(child.adult.female.survived$Freq)
total.adult.male.survived <- sum(adult.male.survived$Freq)
percent.child.adult.female <- round((total.child.adult.female.survived / total.child.adult.female) * 100, 0)
percent.adult.male <- round((total.adult.male.survived / total.adult.male) * 100, 0)
return(paste("Of ", ticket, " class, ", percent.child.adult.female, "% of women and children survived and ", percent.adult.male, "% of men survived.", sep = ""))
}
# Call your `SurvivalRate()` function on each of the ticketing classes (`Crew`, `1st`, `2nd`, and `3rd`)
SurvivalRate('Crew')
=======
>>>>>>> idk
SurvivalRate('1st')
SurvivalRate('2nd')
SurvivalRate('3rd')
################################### Reading in Data (40 points) ###################################
# In this section, we'll read in a .csv file, which is essentially a tabular row/column layout
# This is like Microsoft Excel or Google Docs, but without the formatting.
# The .csv file we'll be working with has the life expectancy for each country in 1960 and 2013.
# We'll ask real-world questions about the data by writing the code that answers our question. Here are the steps you should walk through:
# Using the `read.csv` funciton, read the life_expectancy.csv file into a variable called `life.expectancy`
# Makes sure not to read strings as factors
life.expectancy <- read.csv(file = "life_expectancy.csv")
# Determine if life.expectancy is a data.frame by using the is.data.frame function. You may also want to View() it.
# Create a column `life.expectancy$change` that is the change in life expectancy from 1960 to 2013
# Create a variable `most.improved` that is the name of the country with the largest gain in life expectancy
# Create a variable `num.small.gain` that has the number of countries whose life expectance has improved fewer than 5 years between 1960 and 2013
# Write a function `CountryChange` that takes in a country's name as a parameter, and returns it's change in life expectancy from 1960 to 2013
# Using your `CountryChange` funciton, create a variable `sweden.change` that is the change in life expectancy from 1960 to 2013 in Sweden
# Define a function `LowestLifeExpInRegion` that takes in a **region** as an argument, and returns
# the **name of the country** with the lowest life expectancy in 2013 (in that region)
# Using the function you just wrote, create a variable `lowest.in.south.asia` that is the country with the lowest life expectancy in 2013 in South Asia
# Write a function `BiggerChange` that takes in two country names as parameters, and returns a sentence that
# describes which country experienced a larger gain in life expectancy (and by how many years).
# For example, if you passed the values "China", and "Bolivia" into your function, it would return this:
# "The country with the bigger change in life expectancy was China (gain=31.9), whose life expectancy grew by 7.4 years more than Bolivia's (gain=24.5)."
# Make sure to round your numbers.
# Using your `BiggerChange` funciton, create a variable `usa.or.france` that describes who had a larger gain in life expectancy (the United States or France)
# Write your `life.expectancy` data.frame to a new .csv file to your data/ directory with the filename `life_expectancy_with_change.csv`. Make sure not to write row names.
################################### Challenge (10 points) ###################################
# In a single line of code, create a variable that has the name of the region with the
# highest average change in life expectancy between the two time points.
# To do this, you'll need to compute the average change across the countries in each region, and then
# compare the averages across regions. Feel free to use any library of your choice, or base R functions.
# a3-using-data
################################### Set up (2 Points) ###################################
# Before you get started, make sure to set your working directory using the tilde (~)
cd ~/Google Drive/UW/2016-17/INFO201
################################### DataFrame Manipulation (20 Points) ###################################
# Create a vector `first.names` with 5 names in it
first.names <- c('Seungri', 'Taeyang', 'GD', 'TOP', 'Daesung')
# Create a vector `math.grades` with 5 hypothetical grades (0 - 100) in a math course (that correspond to the 5 names above)
math.grades <- c(72, 68, 81, 75, 65)
# Create a vector `spanish.grades` with 5 hypothetical grades (0 - 100) in a Spanish course (that correspond to the 5 names above)
spanish.grades <- c(85, 88, 82, 88, 91)
# Create a data.frame variable `students` by combining your vectors `first.names`, `math.grades`, and `spanish.grades`
students <- data.frame(first.names, math.grades, spanish.grades)
# Create a variable `num.students` that contains the number of rows in your data.frame `students`
num.students <- nrow(students)
# Create a variable `num.courses` that contains the number of columns in your data.frame `students` minus one (b/c of their names)
num.courses <- ncol(students) - 1
# Add a new column `grade.diff` to your dataframe, which is equal to `students$math.grades` minus `students$spanish.grades`
students$grade.diff <- students$math.grades - students$spanish.grades
# Add another column `better.at.math` as a boolean (TRUE/FALSE) variable that indicates that a student got a better grade in math
students$better.at.math <- students$grade.diff > 0
# Create a variable `num.better.at.math` that is the number (i.e., one numeric value) of students better at math
num.better.at.math <- length(which(students$better.at.math == TRUE))
# Write your `students` data.frame to a new .csv file inside your data/ directory with the filename `grades.csv`. Make sure not to write row names.
write.csv(students, file = "grades.csv", row.names = FALSE)
################################### Loading R Data (28 points) ###################################
# In this section, you'll work with some data that comes built into the RStudio environment.
# Load the `Titanic` data set. You may also want to use RStudio to `View()` it to learn about its rows and columns.
data("Titanic")
# This data set actually loads in a format called a *table*
# Table documentation: https://cran.r-project.org/web/packages/data.table/data.table.pdf
# This is slightly different than a data frame. Use the `is.data.frame()` function to confirm this.
is.data.frame(Titanic)
# You should convert the `Titanic` variable into a data frame; you can use the `data.frame()` function or `as.data.frame()`
# Be sure to **not** treat strings as factors!
Titanic <- data.frame(Titanic)
# Create a variable `children` that are the rows of the data frame with information about children on the Titanic.
children <- subset(Titanic, Age == "Child")
# Create a variable `num.children` that is the total number of children on the Titanic.
# Hint: remember the `sum()` function!
num.children <- sum(children$Freq)
# Create a variable `most.lost` which has row with the largest absolute number of losses (people who did not survive).
# Tip: you can use multiple statements (lines of code), such as to make "intermediate" sub-frames (similar to what you did with the `children` variables)
did.not.survive <- subset(Titanic, Survived == "No")
max.lost <- max(Titanic$Freq)
most.lost <- did.not.survive[which.max(did.not.survive$Freq), ]
# Define a function called `SurvivalRate` that takes in a ticket class (e.g., "1st", "2nd") as an argument.
# This function should return a sentence describing the total survival rate of men vs. "women and children" in that ticketing class.
# For example: `"Of Crew class, 87% of women and children survived and 22% of men survived."`
# The approach you take to generating the sentence to return is up to you. A good solution will likely utilize
# intermediate variables (subsets of data frames) and filtering to produce the required data.
# Avoid using a "loop" in R!
SurvivalRate <- function(ticket) {
child.adult.female <- subset(Titanic, (Age != 'Adult' | Sex !='Male') & Class == ticket)
adult.male <- subset(Titanic, Age == 'Adult' & Sex == 'Male' & Class == ticket)
total.child.adult.female <- sum(child.adult.female$Freq)
total.adult.male <- sum(adult.male$Freq)
child.adult.female.survived <- subset(child.adult.female, Survived == 'Yes')
adult.male.survived <- subset(adult.male, Survived == 'Yes')
total.child.adult.female.survived <- sum(child.adult.female.survived$Freq)
total.adult.male.survived <- sum(adult.male.survived$Freq)
percent.child.adult.female <- round((total.child.adult.female.survived / total.child.adult.female) * 100, 0)
percent.adult.male <- round((total.adult.male.survived / total.adult.male) * 100, 0)
return(paste("Of ", ticket, " class, ", percent.child.adult.female, "% of women and children survived and ", percent.adult.male, "% of men survived.", sep = ""))
}
# Call your `SurvivalRate()` function on each of the ticketing classes (`Crew`, `1st`, `2nd`, and `3rd`)
SurvivalRate('Crew')
SurvivalRate('1st')
SurvivalRate('2nd')
SurvivalRate('3rd')
################################### Reading in Data (40 points) ###################################
# In this section, we'll read in a .csv file, which is essentially a tabular row/column layout
# This is like Microsoft Excel or Google Docs, but without the formatting.
# The .csv file we'll be working with has the life expectancy for each country in 1960 and 2013.
# We'll ask real-world questions about the data by writing the code that answers our question. Here are the steps you should walk through:
# Using the `read.csv` funciton, read the life_expectancy.csv file into a variable called `life.expectancy`
# Makes sure not to read strings as factors
life.expectancy <- read.csv(file = "life_expectancy.csv")
# Determine if life.expectancy is a data.frame by using the is.data.frame function. You may also want to View() it.
# Create a column `life.expectancy$change` that is the change in life expectancy from 1960 to 2013
# Create a variable `most.improved` that is the name of the country with the largest gain in life expectancy
# Create a variable `num.small.gain` that has the number of countries whose life expectance has improved fewer than 5 years between 1960 and 2013
# Write a function `CountryChange` that takes in a country's name as a parameter, and returns it's change in life expectancy from 1960 to 2013
# Using your `CountryChange` funciton, create a variable `sweden.change` that is the change in life expectancy from 1960 to 2013 in Sweden
# Define a function `LowestLifeExpInRegion` that takes in a **region** as an argument, and returns
# the **name of the country** with the lowest life expectancy in 2013 (in that region)
# Using the function you just wrote, create a variable `lowest.in.south.asia` that is the country with the lowest life expectancy in 2013 in South Asia
# Write a function `BiggerChange` that takes in two country names as parameters, and returns a sentence that
# describes which country experienced a larger gain in life expectancy (and by how many years).
# For example, if you passed the values "China", and "Bolivia" into your function, it would return this:
# "The country with the bigger change in life expectancy was China (gain=31.9), whose life expectancy grew by 7.4 years more than Bolivia's (gain=24.5)."
# Make sure to round your numbers.
# Using your `BiggerChange` funciton, create a variable `usa.or.france` that describes who had a larger gain in life expectancy (the United States or France)
# Write your `life.expectancy` data.frame to a new .csv file to your data/ directory with the filename `life_expectancy_with_change.csv`. Make sure not to write row names.
################################### Challenge (10 points) ###################################
# In a single line of code, create a variable that has the name of the region with the
# highest average change in life expectancy between the two time points.
# To do this, you'll need to compute the average change across the countries in each region, and then
# compare the averages across regions. Feel free to use any library of your choice, or base R functions.
# a3-using-data
################################### Set up (2 Points) ###################################
# Before you get started, make sure to set your working directory using the tilde (~)
set.wd("~/Google Drive/UW/2016-17/INFO201")
################################### DataFrame Manipulation (20 Points) ###################################
# Create a vector `first.names` with 5 names in it
first.names <- c('Seungri', 'Taeyang', 'GD', 'TOP', 'Daesung')
# Create a vector `math.grades` with 5 hypothetical grades (0 - 100) in a math course (that correspond to the 5 names above)
math.grades <- c(72, 68, 81, 75, 65)
# Create a vector `spanish.grades` with 5 hypothetical grades (0 - 100) in a Spanish course (that correspond to the 5 names above)
spanish.grades <- c(85, 88, 82, 88, 91)
# Create a data.frame variable `students` by combining your vectors `first.names`, `math.grades`, and `spanish.grades`
students <- data.frame(first.names, math.grades, spanish.grades)
# Create a variable `num.students` that contains the number of rows in your data.frame `students`
num.students <- nrow(students)
# Create a variable `num.courses` that contains the number of columns in your data.frame `students` minus one (b/c of their names)
num.courses <- ncol(students) - 1
# Add a new column `grade.diff` to your dataframe, which is equal to `students$math.grades` minus `students$spanish.grades`
students$grade.diff <- students$math.grades - students$spanish.grades
# Add another column `better.at.math` as a boolean (TRUE/FALSE) variable that indicates that a student got a better grade in math
students$better.at.math <- students$grade.diff > 0
# Create a variable `num.better.at.math` that is the number (i.e., one numeric value) of students better at math
num.better.at.math <- length(which(students$better.at.math == TRUE))
# Write your `students` data.frame to a new .csv file inside your data/ directory with the filename `grades.csv`. Make sure not to write row names.
write.csv(students, file = "grades.csv", row.names = FALSE)
################################### Loading R Data (28 points) ###################################
# In this section, you'll work with some data that comes built into the RStudio environment.
# Load the `Titanic` data set. You may also want to use RStudio to `View()` it to learn about its rows and columns.
data("Titanic")
# This data set actually loads in a format called a *table*
# Table documentation: https://cran.r-project.org/web/packages/data.table/data.table.pdf
# This is slightly different than a data frame. Use the `is.data.frame()` function to confirm this.
is.data.frame(Titanic)
# You should convert the `Titanic` variable into a data frame; you can use the `data.frame()` function or `as.data.frame()`
# Be sure to **not** treat strings as factors!
Titanic <- data.frame(Titanic)
# Create a variable `children` that are the rows of the data frame with information about children on the Titanic.
children <- subset(Titanic, Age == "Child")
# Create a variable `num.children` that is the total number of children on the Titanic.
# Hint: remember the `sum()` function!
num.children <- sum(children$Freq)
# Create a variable `most.lost` which has row with the largest absolute number of losses (people who did not survive).
# Tip: you can use multiple statements (lines of code), such as to make "intermediate" sub-frames (similar to what you did with the `children` variables)
did.not.survive <- subset(Titanic, Survived == "No")
max.lost <- max(Titanic$Freq)
most.lost <- did.not.survive[which.max(did.not.survive$Freq), ]
# Define a function called `SurvivalRate` that takes in a ticket class (e.g., "1st", "2nd") as an argument.
# This function should return a sentence describing the total survival rate of men vs. "women and children" in that ticketing class.
# For example: `"Of Crew class, 87% of women and children survived and 22% of men survived."`
# The approach you take to generating the sentence to return is up to you. A good solution will likely utilize
# intermediate variables (subsets of data frames) and filtering to produce the required data.
# Avoid using a "loop" in R!
SurvivalRate <- function(ticket) {
child.adult.female <- subset(Titanic, (Age != 'Adult' | Sex !='Male') & Class == ticket)
adult.male <- subset(Titanic, Age == 'Adult' & Sex == 'Male' & Class == ticket)
total.child.adult.female <- sum(child.adult.female$Freq)
total.adult.male <- sum(adult.male$Freq)
child.adult.female.survived <- subset(child.adult.female, Survived == 'Yes')
adult.male.survived <- subset(adult.male, Survived == 'Yes')
total.child.adult.female.survived <- sum(child.adult.female.survived$Freq)
total.adult.male.survived <- sum(adult.male.survived$Freq)
percent.child.adult.female <- round((total.child.adult.female.survived / total.child.adult.female) * 100, 0)
percent.adult.male <- round((total.adult.male.survived / total.adult.male) * 100, 0)
return(paste("Of ", ticket, " class, ", percent.child.adult.female, "% of women and children survived and ", percent.adult.male, "% of men survived.", sep = ""))
}
# Call your `SurvivalRate()` function on each of the ticketing classes (`Crew`, `1st`, `2nd`, and `3rd`)
SurvivalRate('Crew')
SurvivalRate('1st')
SurvivalRate('2nd')
SurvivalRate('3rd')
################################### Reading in Data (40 points) ###################################
# In this section, we'll read in a .csv file, which is essentially a tabular row/column layout
# This is like Microsoft Excel or Google Docs, but without the formatting.
# The .csv file we'll be working with has the life expectancy for each country in 1960 and 2013.
# We'll ask real-world questions about the data by writing the code that answers our question. Here are the steps you should walk through:
# Using the `read.csv` funciton, read the life_expectancy.csv file into a variable called `life.expectancy`
# Makes sure not to read strings as factors
life.expectancy <- read.csv(file = "life_expectancy.csv")
# Determine if life.expectancy is a data.frame by using the is.data.frame function. You may also want to View() it.
# Create a column `life.expectancy$change` that is the change in life expectancy from 1960 to 2013
# Create a variable `most.improved` that is the name of the country with the largest gain in life expectancy
# Create a variable `num.small.gain` that has the number of countries whose life expectance has improved fewer than 5 years between 1960 and 2013
# Write a function `CountryChange` that takes in a country's name as a parameter, and returns it's change in life expectancy from 1960 to 2013
# Using your `CountryChange` funciton, create a variable `sweden.change` that is the change in life expectancy from 1960 to 2013 in Sweden
# Define a function `LowestLifeExpInRegion` that takes in a **region** as an argument, and returns
# the **name of the country** with the lowest life expectancy in 2013 (in that region)
# Using the function you just wrote, create a variable `lowest.in.south.asia` that is the country with the lowest life expectancy in 2013 in South Asia
# Write a function `BiggerChange` that takes in two country names as parameters, and returns a sentence that
# describes which country experienced a larger gain in life expectancy (and by how many years).
# For example, if you passed the values "China", and "Bolivia" into your function, it would return this:
# "The country with the bigger change in life expectancy was China (gain=31.9), whose life expectancy grew by 7.4 years more than Bolivia's (gain=24.5)."
# Make sure to round your numbers.
# Using your `BiggerChange` funciton, create a variable `usa.or.france` that describes who had a larger gain in life expectancy (the United States or France)
# Write your `life.expectancy` data.frame to a new .csv file to your data/ directory with the filename `life_expectancy_with_change.csv`. Make sure not to write row names.
################################### Challenge (10 points) ###################################
# In a single line of code, create a variable that has the name of the region with the
# highest average change in life expectancy between the two time points.
# To do this, you'll need to compute the average change across the countries in each region, and then
# compare the averages across regions. Feel free to use any library of your choice, or base R functions.
setwd("~/Google Drive/UW/2016-17/INFO201")
library(plotly)
packageVersion('plotly')
install.packages(plotly)
install.packages('plotlu')
install.packages('plotly')
library(plotly)
packageVersion('plotly')
>>>>>>> f9f3e67f20eab1a71470ceb0f74199402cd108c9
library(plotly)
library(shinythemes)
df <- read.csv("data/Bach_Degrees_By_Race.csv", header = TRUE, stringsAsFactors = FALSE)
shinyUI(
navbarPage(
theme = shinytheme("yeti"),
"Bachelor Degrees Over Time",
tabPanel("Race",
titlePanel("Bachelor Degrees by Race"),
sidebarLayout(
sidebarPanel(
width = 2,
radioButtons(inputId = "year",
label = "Select the School Year",
choices = c("2013-14", "2014-15"))
# selectInput(inputId = "races",
#             label = "Select Race to Filter Down to",
#             choices = df[1, 2:19])
),
mainPanel(
plotlyOutput("race")
)
)
)
# ,
# tabPanel("Gender",
#          titlePanel("Bachelor Degrees by Gender"),
#          sidebarLayout(
#            sidebarPanel(
#
#            )
#          ),
#
#          mainPanel(
#            plotlyOutput("gender")
#          )
# ),
# tabPanel("Degrees",
#          titlePanel("Higher Degrees"),
#          sidebarLayout(
#            sidebarPanel(
#
#            )
#          ),
#
#          mainPanel(
#            plotlyOutput("degrees")
#          )
# )
))
install.packages("shinythemes")
library(shinythemes)
runApp('C:/Users/Calvin/Desktop/info201/assignments/DegreesOverTime')
shiny::runApp()
library(dplyr)
library(plotly)
df <- read.csv("data/Bach_Degrees.csv", header = TRUE, stringsAsFactors = FALSE)
BuildGraph <- function() {
majors <- df[2:37, 'Field.of.study']
amounts1 <- df[2:37, 'X2013.14.Total']
amounts2 <- df[2:37, 'X2014.15.Total']
p <- plot_ly(
x = ~majors,
y = ~amounts1,
type = "bar",
name = '2013-14 Majors') %>%
add_trace(y = ~amounts2,
name = '2014-15 Majors') %>%
layout(xaxis = list(title = 'Majors', tickangle = 45),
yaxis = list(title = 'Amount'),
barmode = 'group',
autosize = F,
width = 1500,
height = 700,
margin = list(b = 300, r = 200, t = 50))
return(p)
}
View(df)
runApp()
View(df)
df <- read.csv("data/Bach_Degrees.csv", header = TRUE, stringsAsFactors = FALSE)
runApp()
df <- read.csv("data/Bach_Degrees.csv", header = TRUE, stringsAsFactors = FALSE)
View(df)
amounts1 <- df[2:37, 'X1970.71']
x = ~majors,
y = ~year70,
type = "bar",
name = '1970-71 Majors') %>%
add_trace(y = ~year75,
name = '1975-76 Majors')%>%
add_trace(y = ~year80,
name = '1980-81 Majors') %>%
layout(xaxis = list(title = 'Majors', tickangle = 45),
yaxis = list(title = 'Amount'),
barmode = 'group',
autosize = F,
width = 1500,
height = 700,
margin = list(b = 300, r = 200, t = 50))
library(dplyr)
library(plotly)
<<<<<<< HEAD
#
# setwd('C:/Users/Wendy/Google Drive/UW/2016-17/INFO201/DegreesOverTime')
df <- read.csv("data/Bach_Degrees.csv", header = TRUE, stringsAsFactors = FALSE)
BuildGraph <- function() {
majors <- df[2:37, 'Field.of.study']
year70 <- df[2:37, 'X1970.71']
year75 <- df[2:37, 'X1975.76']
year80 <- df[2:37, 'X1980.81']
year85 <- df[2:37, 'X1985.86']
year90 <- df[2:37, 'X1990.91']
year95 <- df[2:37, 'X1995.96']
year00 <- df[2:37, 'X2000.01']
year04 <- df[2:37, 'X2004.05']
year05 <- df[2:37, 'X2005.06']
year06 <- df[2:37, 'X2006.07']
year07 <- df[2:37, 'X2007.08']
year08 <- df[2:37, 'X2008.09']
year09 <- df[2:37, 'X2009.10']
year10 <- df[2:37, 'X2010.11']
year11 <- df[2:37, 'X2011.12']
year12 <- df[2:37, 'X2012.13']
year13 <- df[2:37, 'X2013.14']
year14 <- df[2:37, 'X2014.15']
p <- plot_ly(
x = ~majors,
y = ~year70,
type = "bar",
name = '1970-71 Majors') %>%
add_trace(y = ~year75,
name = '1975-76 Majors')%>%
add_trace(y = ~year80,
name = '1980-81 Majors') %>%
layout(xaxis = list(title = 'Majors', tickangle = 45),
yaxis = list(title = 'Amount'),
barmode = 'group',
autosize = F,
width = 1500,
height = 700,
margin = list(b = 300, r = 200, t = 50))
return(p)
}
library(dplyr)
library(plotly)
#
# setwd('C:/Users/Wendy/Google Drive/UW/2016-17/INFO201/DegreesOverTime')
df <- read.csv("data/Bach_Degrees.csv", header = TRUE, stringsAsFactors = FALSE)
BuildGraph <- function() {
majors <- df[2:37, 'Field.of.study']
year70 <- df[2:37, 'X1970.71']
year75 <- df[2:37, 'X1975.76']
year80 <- df[2:37, 'X1980.81']
year85 <- df[2:37, 'X1985.86']
year90 <- df[2:37, 'X1990.91']
year95 <- df[2:37, 'X1995.96']
year00 <- df[2:37, 'X2000.01']
year04 <- df[2:37, 'X2004.05']
year05 <- df[2:37, 'X2005.06']
year06 <- df[2:37, 'X2006.07']
year07 <- df[2:37, 'X2007.08']
year08 <- df[2:37, 'X2008.09']
year09 <- df[2:37, 'X2009.10']
year10 <- df[2:37, 'X2010.11']
year11 <- df[2:37, 'X2011.12']
year12 <- df[2:37, 'X2012.13']
year13 <- df[2:37, 'X2013.14']
year14 <- df[2:37, 'X2014.15']
p <- plot_ly(
x = ~majors,
y = ~year70,
type = "bar",
name = '1970-71 Majors') %>%
add_trace(y = ~year75,
name = '1975-76 Majors')%>%
add_trace(y = ~year80,
name = '1980-81 Majors') %>%
layout(xaxis = list(title = 'Majors', tickangle = 45),
yaxis = list(title = 'Amount'),
barmode = 'group',
autosize = F,
width = 1500,
height = 700,
margin = list(b = 300, r = 200, t = 50))
return(p)
}
runApp()
library(dplyr)
library(plotly)
#
# setwd('C:/Users/Wendy/Google Drive/UW/2016-17/INFO201/DegreesOverTime')
df <- read.csv("data/Bach_Degrees.csv", header = TRUE, stringsAsFactors = FALSE)
BuildGraph <- function() {
majors <- df[2:37, 'Field.of.study']
year70 <- df[2:37, 'X1970.71']
year75 <- df[2:37, 'X1975.76']
year80 <- df[2:37, 'X1980.81']
year85 <- df[2:37, 'X1985.86']
year90 <- df[2:37, 'X1990.91']
year95 <- df[2:37, 'X1995.96']
year00 <- df[2:37, 'X2000.01']
year04 <- df[2:37, 'X2004.05']
year05 <- df[2:37, 'X2005.06']
year06 <- df[2:37, 'X2006.07']
year07 <- df[2:37, 'X2007.08']
year08 <- df[2:37, 'X2008.09']
year09 <- df[2:37, 'X2009.10']
year10 <- df[2:37, 'X2010.11']
year11 <- df[2:37, 'X2011.12']
year12 <- df[2:37, 'X2012.13']
year13 <- df[2:37, 'X2013.14']
year14 <- df[2:37, 'X2014.15']
p <- plot_ly(
x = ~majors,
y = ~year70,
type = "bar",
name = '1970-71 Majors') %>%
add_trace(y = ~year75,
name = '1975-76 Majors')%>%
add_trace(y = ~year80,
name = '1980-81 Majors')%>%
add_trace(y = ~year85,
name = '1985-86 Majors')%>%
add_trace(y = ~year90,
name = '1990-91 Majors')%>%
add_trace(y = ~year95,
name = '1995-96 Majors')%>%
add_trace(y = ~year00,
name = '2000-01 Majors')%>%
add_trace(y = ~year04,
name = '2004-05 Majors')%>%
add_trace(y = ~year05,
name = '2005-06 Majors')%>%
add_trace(y = ~year06,
name = '2006-07 Majors')%>%
add_trace(y = ~year07,
name = '2007-08 Majors')%>%
add_trace(y = ~year08,
name = '2008-09 Majors')%>%
add_trace(y = ~year09,
name = '2009-10 Majors')%>%
add_trace(y = ~year10,
name = '2010-11 Majors')%>%
add_trace(y = ~year11,
name = '2011-12 Majors')%>%
add_trace(y = ~year12,
name = '2012-13 Majors')%>%
add_trace(y = ~year13,
name = '2013-14 Majors')%>%
add_trace(y = ~year14,
=======
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv')
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
p <- plot_geo(df) %>%
add_trace(
z = ~GDP..BILLIONS., color = ~GDP..BILLIONS., colors = 'Blues',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'GDP Billions US$', tickprefix = '$') %>%
layout(
title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g
)
```
shiny::runApp('C:/Users/Wendy/Google Drive/UW/2016-17/INFO201/a8-building-apps-wliang25')
shiny::runApp('C:/Users/Wendy/Google Drive/UW/2016-17/INFO201/DegreesOverTime')
shiny::runApp('C:/Users/Wendy/Google Drive/UW/2016-17/INFO201/DegreesOverTime')
setwd('C:/Users/Wendy/Google Drive/UW/2016-17/INFO201/DegreesOverTime')
<<<<<<< HEAD
df <- read.csv("data/Bach_Degrees_By_Race.csv", header = TRUE, stringsAsFactors = FALSE)
BuildGraph <- function() {
majors <- df[2:37, 'Field.of.study']
amounts1 <- df[2:37, 'X2013.14.Total']
amounts2 <- df[2:37, 'X2014.15.Total']
p <- plot_ly(
x = ~majors,
y = ~amounts1,
type = "bar",
name = '2013-14 Majors') %>%
add_trace(y = ~amounts2,
>>>>>>> f9f3e67f20eab1a71470ceb0f74199402cd108c9
name = '2014-15 Majors') %>%
layout(xaxis = list(title = 'Majors', tickangle = 45),
yaxis = list(title = 'Amount'),
barmode = 'group',
autosize = F,
width = 1500,
height = 700,
margin = list(b = 300, r = 200, t = 50))
return(p)
}
<<<<<<< HEAD
field.df <- read.csv("data/Bach_Degrees.csv", header = TRUE, stringsAsFactors = FALSE)
=======
View(df)
>>>>>>> f9f3e67f20eab1a71470ceb0f74199402cd108c9
=======
all.years <- read.csv("data/Bach_Degrees_By_Race.csv", header = TRUE, stringsAsFactors = FALSE)
first.years <- read.csv("data/Bach_Degrees_By_Race_13_14.csv", header = TRUE, stringsAsFactors = FALSE)
second.years <- read.csv("data/Bach_Degrees_By_Race_14_15.csv", header = TRUE, stringsAsFactors = FALSE)
View(df)
all.years <- read.csv("data/Bach_Degrees_By_Race.csv", header = TRUE, stringsAsFactors = FALSE)
first.years <- read.csv("data/Bach_Degrees_By_Race_13_14.csv", header = TRUE, stringsAsFactors = FALSE)
second.years <- read.csv("data/Bach_Degrees_By_Race_14_15.csv", header = TRUE, stringsAsFactors = FALSE)
View(all.years)
View(first.years)
View(second.years)
all.years <- read.csv("data/Bach_Degrees_By_Race.csv", header = TRUE, stringsAsFactors = FALSE, check.names = FALSE)
first.years <- read.csv("data/Bach_Degrees_By_Race_13_14.csv", header = TRUE, stringsAsFactors = FALSE, check.names = FALSE)
second.years <- read.csv("data/Bach_Degrees_By_Race_14_15.csv", header = TRUE, stringsAsFactors = FALSE, check.names = FALSE)
colnames(all.years)
all.years <- read.csv("data/Bach_Degrees_By_Race.csv", header = TRUE, stringsAsFactors = FALSE, check.names = FALSE)
first.years <- read.csv("data/Bach_Degrees_By_Race_13_14.csv", header = TRUE, stringsAsFactors = FALSE, check.names = FALSE)
second.years <- read.csv("data/Bach_Degrees_By_Race_14_15.csv", header = TRUE, stringsAsFactors = FALSE, check.names = FALSE)
colnames(all.years)
colnames(first.years)
colnames(second.years)
runApp()
runApp()
runApp()
all.years <- read.csv("data/Bach_Degrees_By_Race.csv", header = TRUE, stringsAsFactors = FALSE)
first.years <- read.csv("data/Bach_Degrees_By_Race_13_14.csv", header = TRUE, stringsAsFactors = FALSE)
second.years <- read.csv("data/Bach_Degrees_By_Race_14_15.csv", header = TRUE, stringsAsFactors = FALSE)
all.years <- read.csv("data/Bach_Degrees_By_Race.csv", header = TRUE, stringsAsFactors = FALSE)
first.years <- read.csv("data/Bach_Degrees_By_Race_13_14.csv", header = TRUE, stringsAsFactors = FALSE)
second.years <- read.csv("data/Bach_Degrees_By_Race_14_15.csv", header = TRUE, stringsAsFactors = FALSE)
colnames(all.years) <- gsub(".", " ", all.years)
colnames(all.years) <- gsub(".", " ", colnames(all.years))
all.years <- read.csv("data/Bach_Degrees_By_Race.csv", header = TRUE, stringsAsFactors = FALSE)
first.years <- read.csv("data/Bach_Degrees_By_Race_13_14.csv", header = TRUE, stringsAsFactors = FALSE)
second.years <- read.csv("data/Bach_Degrees_By_Race_14_15.csv", header = TRUE, stringsAsFactors = FALSE)
colnames(all.years) <- gsub(".", " ", colnames(all.years))
colnames(all.years) <- gsub("\\.", " ", colnames(all.years))
all.years <- read.csv("data/Bach_Degrees_By_Race.csv", header = TRUE, stringsAsFactors = FALSE)
first.years <- read.csv("data/Bach_Degrees_By_Race_13_14.csv", header = TRUE, stringsAsFactors = FALSE)
second.years <- read.csv("data/Bach_Degrees_By_Race_14_15.csv", header = TRUE, stringsAsFactors = FALSE)
colnames(all.years) <- gsub("\\.", " ", colnames(all.years))
all.years <- read.csv("data/Bach_Degrees_By_Race.csv", header = TRUE, stringsAsFactors = FALSE)
first.years <- read.csv("data/Bach_Degrees_By_Race_13_14.csv", header = TRUE, stringsAsFactors = FALSE)
second.years <- read.csv("data/Bach_Degrees_By_Race_14_15.csv", header = TRUE, stringsAsFactors = FALSE)
colnames(all.years) <- gsub("\\.", " ", colnames(all.years))
colnames(all.years) <- gsub("X", "", colnames(all.years))
all.years <- read.csv("data/Bach_Degrees_By_Race.csv", header = TRUE, stringsAsFactors = FALSE)
first.years <- read.csv("data/Bach_Degrees_By_Race_13_14.csv", header = TRUE, stringsAsFactors = FALSE)
second.years <- read.csv("data/Bach_Degrees_By_Race_14_15.csv", header = TRUE, stringsAsFactors = FALSE)
colnames(all.years) <- gsub("\\.", " ", colnames(all.years))
colnames(all.years) <- gsub("X", "", colnames(all.years))
colnames(first.years) <- gsub("\\.", " ", colnames(first.years))
colnames(first.years) <- gsub("X", "", colnames(first.years))
colnames(second.years) <- gsub("\\.", " ", colnames(second.years))
colnames(second.years) <- gsub("X", "", colnames(second.years))
runApp()
runApp()
runApp()
runApp()
>>>>>>> idk
